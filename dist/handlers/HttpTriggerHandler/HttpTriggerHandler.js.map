{"version":3,"sources":["../../../src/handlers/HttpTriggerHandler/HttpTriggerHandler.js"],"names":["errors","require","requestMethodShouldBe","specfifyHttpMethod","validateQueryParams","validateRequestBody","HttpTriggerHandler","httpMethod","queryParamsDef","requestBodyDef","mainFunction","handler","context","req","BadRequest","method","validationResult","allValid","call","InternalServerError","exception","message","stack","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAASC,QAAQ,yBAAR,CAAf;;eACsDA,gC;IAA9CC,qB,YAAAA,qB;IAAuBC,kB,YAAAA,kB;;gBACCF,4B;IAAxBG,mB,aAAAA,mB;;gBACwBH,4B;IAAxBI,mB,aAAAA,mB;;IAEFC,kB;AACJ,gCAAc;AAAA;;AACZ,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;;;kCACaH,U,EAAY;AACxB,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;2BACMC,Y,EAAc;AAAA;;AACnB,WAAKA,YAAL,GAAoBA,YAApB;AACA,UAAMC,UAAU,IAAhB;AACA;AAAA,4FAAO,iBAAOC,OAAP,EAAgBC,GAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAEEF,QAAQJ,UAFV;AAAA;AAAA;AAAA;;AAAA,mDAGM,IAAIP,OAAOc,UAAX,CAAsBX,kBAAtB,CAHN;;AAAA;AAAA,wBAKCU,IAAIE,MAAJ,KAAeJ,QAAQJ,UALxB;AAAA;AAAA;AAAA;;AAAA,mDAMM,IAAIP,OAAOc,UAAX,CAAsBZ,wBAAwBS,QAAQJ,UAAtD,CANN;;AAAA;AAAA,uBAQCI,QAAQH,cART;AAAA;AAAA;AAAA;;AASKQ,kCATL,GASwBZ,oBAAoBS,GAApB,EAAyBF,QAAQH,cAAjC,CATxB;;AAAA,sBAUIQ,iBAAiBC,QAVrB;AAAA;AAAA;AAAA;;AAAA,mDAWQ,IAAIjB,OAAOc,UAAX,CAAsBE,iBAAiBhB,MAAvC,CAXR;;AAAA;AAAA,uBAcCW,QAAQF,cAdT;AAAA;AAAA;AAAA;;AAeKO,mCAfL,GAewBX,oBAAoBQ,GAApB,EAAyBF,QAAQF,cAAjC,CAfxB;;AAAA,sBAgBIO,kBAAiBC,QAhBrB;AAAA;AAAA;AAAA;;AAAA,mDAiBQ,IAAIjB,OAAOc,UAAX,CAAsBE,kBAAiBhB,MAAvC,CAjBR;;AAAA;AAAA;AAAA,yBAoBUW,QAAQD,YAAR,CAAqBQ,IAArB,CAA0BP,QAAQD,YAAlC,EAAgDE,OAAhD,EAAyDC,GAAzD,CApBV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,mDAsBI,IAAIb,OAAOmB,mBAAX,CAA+B,EAAEC,WAAW,YAAMC,OAAnB,EAA4BC,OAAO,YAAMA,KAAzC,EAA/B,CAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAyBD;;;;;AAEHC,OAAOC,OAAP,GAAiBlB,kBAAjB","file":"HttpTriggerHandler.js","sourcesContent":["const errors = require('node-http-error-objects');\nconst { requestMethodShouldBe, specfifyHttpMethod } = require('../../messages/server');\nconst { validateQueryParams } = require('../../validations');\nconst { validateRequestBody } = require('../../validations');\n\nclass HttpTriggerHandler {\n  constructor() {\n    this.httpMethod = null;\n    this.queryParamsDef = null;\n    this.requestBodyDef = null;\n    this.mainFunction = null;\n  }\n  setHttpMethod(httpMethod) {\n    this.httpMethod = httpMethod;\n    return this;\n  }\n  setQueryParamsDefinition(queryParamsDef) {\n    this.queryParamsDef = queryParamsDef;\n    return this;\n  }\n  setRequestBodyDefinition(requestBodyDef) {\n    this.requestBodyDef = requestBodyDef;\n    return this;\n  }\n  listen(mainFunction) {\n    this.mainFunction = mainFunction;\n    const handler = this;\n    return async (context, req) => {\n      try {\n        if (!handler.httpMethod) {\n          return new errors.BadRequest(specfifyHttpMethod);\n        }\n        if (req.method !== handler.httpMethod) {\n          return new errors.BadRequest(requestMethodShouldBe + handler.httpMethod);\n        }\n        if (handler.queryParamsDef) {\n          const validationResult = validateQueryParams(req, handler.queryParamsDef);\n          if (!validationResult.allValid) {\n            return new errors.BadRequest(validationResult.errors);\n          }\n        }\n        if (handler.requestBodyDef) {\n          const validationResult = validateRequestBody(req, handler.requestBodyDef);\n          if (!validationResult.allValid) {\n            return new errors.BadRequest(validationResult.errors);\n          }\n        }\n        return await handler.mainFunction.call(handler.mainFunction, context, req);\n      } catch (error) {\n        return new errors.InternalServerError({ exception: error.message, stack: error.stack });\n      }\n    };\n  }\n}\nmodule.exports = HttpTriggerHandler;\n"]}