{"version":3,"sources":["../../../src/validations/validateQueryParams/validateQueryParams.unit.spec.js"],"names":["validateQueryParams","require","queryParamDef","isValidDate","fakeRequest","query","storeId","vendorId","priceFamily","dateFrom","dateTo","invalidValidator","invalidValidatorWithParam","param","describe","test","queryParamsDef","result","expect","allValid","toBe","errors","length"],"mappings":";;AAAA,IAAMA,sBAAsBC,gCAA5B;AACA,IAAMC,gBAAgBD,0BAAtB;;eACwBA,4B;IAAhBE,W,YAAAA,W;;AAER,IAAMC,cAAc;AAClBC,SAAO;AACLC,aAAS,QADJ;AAELC,cAAU,QAFL;AAGLC,iBAAa,QAHR;AAILC,cAAU,YAJL;AAKLC,YAAQ;AALH;AADW,CAApB;;AAUA,IAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,SAAM,IAAI,CAAV;AAAA,CAAzB;AACA,IAAMC,4BAA4B,SAA5BA,yBAA4B;AAAA,SAAYC,KAAZ;AAAA,CAAlC;;AAEAC,SAAS,uCAAT,EAAkD,YAAM;AACtDC,OAAK,uFAAL,EAA8F,YAAM;AAClG,QAAMC,iBAAiB,CACrBd,cAAc,SAAd,EAAyB,IAAzB,CADqB,EAErBA,cAAc,UAAd,EAA0B,IAA1B,CAFqB,EAGrBA,cAAc,aAAd,EAA6B,IAA7B,CAHqB,EAIrBA,cAAc,UAAd,EAA0B,IAA1B,EAAgCC,WAAhC,CAJqB,EAKrBD,cAAc,QAAd,EAAwB,IAAxB,EAA8BC,WAA9B,CALqB,CAAvB;AAOA,QAAMc,SAASjB,oBAAoBI,WAApB,EAAiCY,cAAjC,CAAf;AACAE,WAAOD,OAAOE,QAAd,EAAwBC,IAAxB,CAA6B,IAA7B;AACAF,WAAOD,OAAOI,MAAP,CAAcC,MAArB,EAA6BF,IAA7B,CAAkC,CAAlC;AACD,GAXD;;AAaAL,OAAK,wFAAL,EAA+F,YAAM;AACnG,QAAMC,iBAAiB,CACrBd,cAAc,SAAd,EAAyB,IAAzB,CADqB,EAErBA,cAAc,UAAd,EAA0B,IAA1B,CAFqB,EAGrBA,cAAc,aAAd,EAA6B,IAA7B,CAHqB,EAIrBA,cAAc,UAAd,EAA0B,KAA1B,EAAiCC,WAAjC,CAJqB,EAKrBD,cAAc,QAAd,EAAwB,KAAxB,EAA+BC,WAA/B,CALqB,CAAvB;AAOA,QAAMc,SAASjB,oBAAoBI,WAApB,EAAiCY,cAAjC,CAAf;AACAE,WAAOD,OAAOE,QAAd,EAAwBC,IAAxB,CAA6B,IAA7B;AACAF,WAAOD,OAAOI,MAAP,CAAcC,MAArB,EAA6BF,IAA7B,CAAkC,CAAlC;AACD,GAXD;;AAaAL,OAAK,8GAAL,EAAqH,YAAM;AACzH,QAAMC,iBAAiB,CACrBd,cAAc,SAAd,EAAyB,IAAzB,CADqB,EAErBA,cAAc,UAAd,EAA0B,IAA1B,EAAgCU,yBAAhC,CAFqB,EAGrBV,cAAc,aAAd,EAA6B,IAA7B,EAAmCS,gBAAnC,CAHqB,EAIrBT,cAAc,UAAd,EAA0B,KAA1B,EAAiCC,WAAjC,CAJqB,EAKrBD,cAAc,QAAd,EAAwB,IAAxB,EAA8BU,yBAA9B,CALqB,EAMrBV,cAAc,aAAd,EAA6B,IAA7B,CANqB,CAAvB;AAQA,QAAMe,SAASjB,oBAAoBI,WAApB,EAAiCY,cAAjC,CAAf;AACAE,WAAOD,OAAOE,QAAd,EAAwBC,IAAxB,CAA6B,KAA7B;AACAF,WAAOD,OAAOI,MAAP,CAAcC,MAArB,EAA6BF,IAA7B,CAAkC,CAAlC;AACD,GAZD;AAaD,CAxCD","file":"validateQueryParams.unit.spec.js","sourcesContent":["const validateQueryParams = require('./validateQueryParams');\nconst queryParamDef = require('./queryParamDef');\nconst { isValidDate } = require('../../validations');\n\nconst fakeRequest = {\n  query: {\n    storeId: 'STR001',\n    vendorId: 'VND001',\n    priceFamily: 'PRC001',\n    dateFrom: '2018-03-11',\n    dateTo: '2018-03-17',\n  },\n};\n\nconst invalidValidator = () => 1 + 1;\nconst invalidValidatorWithParam = param => `${param} notboolean`;\n\ndescribe('utils/validations/validateQueryParams', () => {\n  test('Should pass if params complied with the definition. All required and All Valid Values', () => {\n    const queryParamsDef = [\n      queryParamDef('storeId', true),\n      queryParamDef('vendorId', true),\n      queryParamDef('priceFamily', true),\n      queryParamDef('dateFrom', true, isValidDate),\n      queryParamDef('dateTo', true, isValidDate),\n    ];\n    const result = validateQueryParams(fakeRequest, queryParamsDef);\n    expect(result.allValid).toBe(true);\n    expect(result.errors.length).toBe(0);\n  });\n\n  test('Should pass if params complied with the definition. Some required and All Valid Values', () => {\n    const queryParamsDef = [\n      queryParamDef('storeId', true),\n      queryParamDef('vendorId', true),\n      queryParamDef('priceFamily', true),\n      queryParamDef('dateFrom', false, isValidDate),\n      queryParamDef('dateTo', false, isValidDate),\n    ];\n    const result = validateQueryParams(fakeRequest, queryParamsDef);\n    expect(result.allValid).toBe(true);\n    expect(result.errors.length).toBe(0);\n  });\n\n  test('Should fail if params did not comply with the definition. Required params was not provided and invalid case.', () => {\n    const queryParamsDef = [\n      queryParamDef('storeid', true),\n      queryParamDef('vendorId', true, invalidValidatorWithParam),\n      queryParamDef('priceFamily', true, invalidValidator),\n      queryParamDef('dateFrom', false, isValidDate),\n      queryParamDef('dateTo', true, invalidValidatorWithParam),\n      queryParamDef('NONEXISTENT', true),\n    ];\n    const result = validateQueryParams(fakeRequest, queryParamsDef);\n    expect(result.allValid).toBe(false);\n    expect(result.errors.length).toBe(5);\n  });\n});\n"]}