{"version":3,"sources":["../../../src/validations/validateQueryParams/validateQueryParams.js"],"names":["require","isFunction","addParamError","paramErrors","param","message","push","checkIfParamIsRequired","paramRequired","paramValue","item","name","invokeValidators","validatorFunction","validator","validatorResult","call","validateQueryParams","req","queryparamsdef","forEach","index","required","query","allValid","length","errors","module","exports"],"mappings":";;;;;;;;eAAuBA,QAAQ,QAAR,C;IAAfC,U,YAAAA,U;;AAER;;;;;;;;AAMA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,WAAD,EAAcC,KAAd,EAAqBC,OAArB,EAAiC;AACrDF,cAAYG,IAAZ,CAAiB;AACfF,gBADe;AAEfC;AAFe,GAAjB;AAID,CALD;;AAOA;;;;;;;AAOA,IAAME,yBAAyB,SAAzBA,sBAAyB,CAACC,aAAD,EAAgBC,UAAhB,EAA4BN,WAA5B,EAAyCO,IAAzC,EAAkD;AAC/E,MAAIF,iBAAiB,CAACC,UAAtB,EAAkC;AAChCP,kBAAcC,WAAd,EAA2BO,KAAKC,IAAhC,cAAgDD,KAAKC,IAArD;AACD;AACF,CAJD;;AAMA;;;;;;AAMA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACF,IAAD,EAAOD,UAAP,EAAmBN,WAAnB,EAAmC;AAC1D,MAAMU,oBAAoBH,KAAKI,SAA/B;AACA,MAAID,iBAAJ,EAAuB;AACrB,QAAIZ,WAAWY,iBAAX,KAAiCJ,UAArC,EAAiD;AAC/C,UAAMM,kBAAkBF,kBAAkBG,IAAlB,YAA6BP,UAA7B,CAAxB;AACA;AACA,UAAI,OAAQM,eAAR,KAA6B,SAAjC,EAA4C;AAC1Cb,sBAAcC,WAAd,EAA2BO,KAAKC,IAAhC,cAAgDD,KAAKC,IAArD,qBAAyEE,kBAAkBF,IAA3F;AACA;AACD,OAHD,MAGO,IAAI,CAACI,eAAL,EAAsB;AAC3Bb,sBAAcC,WAAd,EAA2BO,KAAKC,IAAhC,oCAAsED,KAAKC,IAA3E,2BAAqGE,kBAAkBF,IAAvH;AACD;AACF,KATD,MASO;AACLT,oBAAcC,WAAd,EAA2BO,KAAKC,IAAhC,cAAgDD,KAAKC,IAArD;AACD;AACF;AACF,CAhBD;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMM,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,cAAN,EAAyB;AACnD,MAAMhB,cAAc,EAApB;AACA,sBAAYgB,cAAZ,EACGC,OADH,CACW,UAACC,KAAD,EAAW;AAClB,QAAMX,OAAOS,eAAeE,KAAf,CAAb;AACA,QAAMb,gBAAgBE,KAAKY,QAA3B;AACA,QAAMb,aAAaS,IAAIK,KAAJ,CAAUb,KAAKC,IAAf,CAAnB;AACA;AACAJ,2BAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDN,WAAlD,EAA+DO,IAA/D;AACA;AACAE,qBAAiBF,IAAjB,EAAuBD,UAAvB,EAAmCN,WAAnC;AACD,GATH;AAUA,SAAO;AACLqB,cAAUrB,YAAYsB,MAAZ,IAAsB,CAD3B;AAELC,YAAQvB;AAFH,GAAP;AAID,CAhBD;;AAkBAwB,OAAOC,OAAP,GAAiBX,mBAAjB","file":"validateQueryParams.js","sourcesContent":["const { isFunction } = require('lodash');\n\n/**\n * Add to param errors list.\n * @param {any} paramErrors\n * @param {any} param\n * @param {any} message\n */\nconst addParamError = (paramErrors, param, message) => {\n  paramErrors.push({\n    param,\n    message,\n  });\n};\n\n/**\n * Check if param is required.\n * @param {any} paramRequired\n * @param {any} paramValue\n * @param {any} paramErrors\n * @param {any} item\n */\nconst checkIfParamIsRequired = (paramRequired, paramValue, paramErrors, item) => {\n  if (paramRequired && !paramValue) {\n    addParamError(paramErrors, item.name, `Param [${item.name}] is required.`);\n  }\n};\n\n/**\n * Invoke validators defined.\n * @param {any} item\n * @param {any} paramValue\n * @param {any} paramErrors\n */\nconst invokeValidators = (item, paramValue, paramErrors) => {\n  const validatorFunction = item.validator;\n  if (validatorFunction) {\n    if (isFunction(validatorFunction) && paramValue) {\n      const validatorResult = validatorFunction.call(this, paramValue);\n      // Validators function should always return boolean type\n      if (typeof (validatorResult) !== 'boolean') {\n        addParamError(paramErrors, item.name, `Param [${item.name}] validator [${validatorFunction.name}] not returning boolean.`);\n        // Validation failed\n      } else if (!validatorResult) {\n        addParamError(paramErrors, item.name, `Validation failed for Param [${item.name}] using validator [${validatorFunction.name}]`);\n      }\n    } else {\n      addParamError(paramErrors, item.name, `Param [${item.name}] validator property is not a function or there is no value to validate.`);\n    }\n  }\n};\n\n/**\n * Validate all query string parameters based on the definition\n * @param {any} req\n * @param {any} queryparamsdef\n * [\n *  {\n *      \"name\": Parameter Name (Case-sensitive),\n *      \"required\": true / false,\n *      \"validator\": function to validate should always return bool, otherwise it will fail\n *  }\n * ]\n * @returns\n * {\n *      \"allValid\": true / false,\n *      \"errors\" : [\n *                  {\n *                      \"param\": Parameter Name,\n *                      \"message\": Error Message\n *                  },\n *                  ...\n *                 ]\n * }\n */\nconst validateQueryParams = (req, queryparamsdef) => {\n  const paramErrors = [];\n  Object.keys(queryparamsdef)\n    .forEach((index) => {\n      const item = queryparamsdef[index];\n      const paramRequired = item.required;\n      const paramValue = req.query[item.name];\n      // Validate if param is required\n      checkIfParamIsRequired(paramRequired, paramValue, paramErrors, item);\n      // Invoke validator function if there is one provided\n      invokeValidators(item, paramValue, paramErrors);\n    });\n  return {\n    allValid: paramErrors.length <= 0,\n    errors: paramErrors,\n  };\n};\n\nmodule.exports = validateQueryParams;\n\n"]}