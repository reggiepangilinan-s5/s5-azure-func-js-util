{"version":3,"sources":["../../../src/validations/validateRequestBody/validateRequestBody.unit.spec.js"],"names":["validateRequestBody","require","requestBodyProp","isValidDate","fakeRequest","body","storeId","vendorId","priceFamily","dateFrom","dateTo","invalidValidator","invalidValidatorWithParam","param","describe","test","reqBodyDefs","result","expect","allValid","toBe","errors","length"],"mappings":";;AAAA,IAAMA,sBAAsBC,gCAA5B;AACA,IAAMC,kBAAkBD,4BAAxB;;eACwBA,4B;IAAhBE,W,YAAAA,W;;AAER,IAAMC,cAAc;AAClBC,QAAM;AACJC,aAAS,QADL;AAEJC,cAAU,QAFN;AAGJC,iBAAa,QAHT;AAIJC,cAAU,YAJN;AAKJC,YAAQ;AALJ;AADY,CAApB;;AAUA,IAAMC,mBAAmB,SAAnBA,gBAAmB;AAAA,SAAM,IAAI,CAAV;AAAA,CAAzB;AACA,IAAMC,4BAA4B,SAA5BA,yBAA4B;AAAA,SAAYC,KAAZ;AAAA,CAAlC;;AAEAC,SAAS,uCAAT,EAAkD,YAAM;AACtDC,OAAK,yFAAL,EAAgG,YAAM;AACpG,QAAMC,cAAc,CAClBd,gBAAgB,SAAhB,CADkB,EAElBA,gBAAgB,UAAhB,CAFkB,EAGlBA,gBAAgB,aAAhB,CAHkB,EAIlBA,gBAAgB,UAAhB,EAA4BC,WAA5B,CAJkB,EAKlBD,gBAAgB,QAAhB,EAA0BC,WAA1B,CALkB,CAApB;AAOA,QAAMc,SAASjB,oBAAoBI,WAApB,EAAiCY,WAAjC,CAAf;AACAE,WAAOD,OAAOE,QAAd,EAAwBC,IAAxB,CAA6B,IAA7B;AACAF,WAAOD,OAAOI,MAAP,CAAcC,MAArB,EAA6BF,IAA7B,CAAkC,CAAlC;AACD,GAXD;AAYAL,OAAK,wFAAL,EAA+F,YAAM;AACnG,QAAMC,cAAc,CAClBd,gBAAgB,SAAhB,CADkB,EAElBA,gBAAgB,UAAhB,EAA4BU,yBAA5B,CAFkB,EAGlBV,gBAAgB,aAAhB,EAA+BS,gBAA/B,CAHkB,EAIlBT,gBAAgB,UAAhB,EAA4BC,WAA5B,CAJkB,EAKlBD,gBAAgB,QAAhB,EAA0BU,yBAA1B,CALkB,EAMlBV,gBAAgB,aAAhB,CANkB,CAApB;AAQA,QAAMe,SAASjB,oBAAoBI,WAApB,EAAiCY,WAAjC,CAAf;AACAE,WAAOD,OAAOE,QAAd,EAAwBC,IAAxB,CAA6B,KAA7B;AACAF,WAAOD,OAAOI,MAAP,CAAcC,MAArB,EAA6BF,IAA7B,CAAkC,CAAlC;AACD,GAZD;AAaD,CA1BD","file":"validateRequestBody.unit.spec.js","sourcesContent":["const validateRequestBody = require('./validateRequestBody');\nconst requestBodyProp = require('./requestBodyProp');\nconst { isValidDate } = require('../../validations');\n\nconst fakeRequest = {\n  body: {\n    storeId: 'STR001',\n    vendorId: 'VND001',\n    priceFamily: 'PRC001',\n    dateFrom: '2018-03-11',\n    dateTo: '2018-03-17',\n  },\n};\n\nconst invalidValidator = () => 1 + 1;\nconst invalidValidatorWithParam = param => `${param} notboolean`;\n\ndescribe('utils/validations/validateRequestBody', () => {\n  test('Should pass if req body complied with the definition. All required and All Valid Values', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeId'),\n      requestBodyProp('vendorId'),\n      requestBodyProp('priceFamily'),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', isValidDate),\n    ];\n    const result = validateRequestBody(fakeRequest, reqBodyDefs);\n    expect(result.allValid).toBe(true);\n    expect(result.errors.length).toBe(0);\n  });\n  test('Should fail if req body did not comply with the definition. Invalid validators passed.', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeid'),\n      requestBodyProp('vendorId', invalidValidatorWithParam),\n      requestBodyProp('priceFamily', invalidValidator),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', invalidValidatorWithParam),\n      requestBodyProp('NONEXISTENT'),\n    ];\n    const result = validateRequestBody(fakeRequest, reqBodyDefs);\n    expect(result.allValid).toBe(false);\n    expect(result.errors.length).toBe(5);\n  });\n});\n"]}