{"version":3,"sources":["../../src/validations/validateRequestBody/validateRequestBody.unit.spec.js"],"names":["moment","require","validateRequestBody","requestBodyProp","fakeRequest","body","storeId","vendorId","priceFamily","dateFrom","dateTo","zeroValue","ignoreThisToo","fakeRequestArray","zeroValueValidator","value","isValidDate","date","isValid","invalidValidator","invalidValidatorWithParam","param","describe","test","reqBodyDefs","result","expect","allValid","toBe","errors","length"],"mappings":"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","file":"validateRequestBody.unit.spec.js","sourcesContent":["const moment = require('moment');\nconst validateRequestBody = require('./validateRequestBody');\nconst requestBodyProp = require('./requestBodyProp');\n\nconst fakeRequest = {\n  body: {\n    storeId: 'STR001',\n    vendorId: 'VND001',\n    priceFamily: 'PRC001',\n    dateFrom: '2018-03-11',\n    dateTo: '2018-03-17',\n    zeroValue: 0,\n    ignoreThisToo: null,\n  },\n};\n\nconst fakeRequestArray = {\n  body: [\n    {\n      storeId: 'STR001',\n      vendorId: 'VND001',\n      priceFamily: 'PRC001',\n      dateFrom: '2018-03-11',\n      dateTo: '2018-03-17',\n      zeroValue: 0,\n      ignoreThisToo: null,\n    },\n    {\n      storeId: 'STR002',\n      vendorId: 'VND002',\n      priceFamily: 'PRC002',\n      dateFrom: '2018-03-11',\n      dateTo: '2018-03-17',\n      zeroValue: 0,\n      ignoreThisToo: null,\n    },\n  ],\n};\n\nconst zeroValueValidator = value => value >= 0;\nconst isValidDate = date => moment(date, 'YYYY-MM-DD').isValid();\nconst invalidValidator = () => 1 + 1;\nconst invalidValidatorWithParam = param => `${param} notboolean`;\n\ndescribe('utils/validations/validateRequestBody', () => {\n  test('Should pass if req body complied with the definition. All required and All Valid Values', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeId'),\n      requestBodyProp('vendorId'),\n      requestBodyProp('priceFamily'),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', isValidDate),\n      requestBodyProp('zeroValue', zeroValueValidator, true),\n      requestBodyProp('ignoreThisToo', null, true),\n    ];\n    const result = validateRequestBody(fakeRequest, reqBodyDefs);\n    expect(result.allValid).toBe(true);\n    expect(result.errors.length).toBe(0);\n  });\n  test('Should fail if req body did not comply with the definition. Invalid validators passed.', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeid'),\n      requestBodyProp('vendorId', invalidValidatorWithParam),\n      requestBodyProp('priceFamily', invalidValidator),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', invalidValidatorWithParam),\n      requestBodyProp('zeroValue', zeroValueValidator, true),\n      requestBodyProp('ignoreThisToo', null, true),\n      requestBodyProp('NONEXISTENT'),\n    ];\n    const result = validateRequestBody(fakeRequest, reqBodyDefs);\n    expect(result.allValid).toBe(false);\n    expect(result.errors.length).toBe(5);\n  });\n\n  test('Should fail if req body is not passed', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeid'),\n      requestBodyProp('vendorId', invalidValidatorWithParam),\n      requestBodyProp('priceFamily', invalidValidator),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', invalidValidatorWithParam),\n      requestBodyProp('zeroValue', null, false),\n      requestBodyProp('ignoreThisToo', null, true),\n      requestBodyProp('NONEXISTENT'),\n    ];\n    const result = validateRequestBody({ body: null }, reqBodyDefs);\n    expect(result.allValid).toBe(false);\n    expect(result.errors.length).toBe(1);\n  });\n\n  test('Should fail if req body is empty', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeid'),\n      requestBodyProp('vendorId', invalidValidatorWithParam),\n      requestBodyProp('priceFamily', invalidValidator),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', invalidValidatorWithParam),\n      requestBodyProp('zeroValue', null, false),\n      requestBodyProp('ignoreThisToo', null, true),\n      requestBodyProp('NONEXISTENT'),\n    ];\n    const result = validateRequestBody({ body: {} }, reqBodyDefs);\n    expect(result.allValid).toBe(false);\n  });\n\n  test('Should pass if req body array complied with the definition. All required and All Valid Values', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeId'),\n      requestBodyProp('vendorId'),\n      requestBodyProp('priceFamily'),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', isValidDate),\n      requestBodyProp('zeroValue', zeroValueValidator, true),\n      requestBodyProp('ignoreThisToo', null, true),\n    ];\n    const result = validateRequestBody(fakeRequestArray, reqBodyDefs);\n    expect(result.allValid).toBe(true);\n  });\n\n  test('Should fail if req body did not comply with the definition. Invalid validators passed.', () => {\n    const reqBodyDefs = [\n      requestBodyProp('storeid'),\n      requestBodyProp('vendorId', invalidValidatorWithParam),\n      requestBodyProp('priceFamily', invalidValidator),\n      requestBodyProp('dateFrom', isValidDate),\n      requestBodyProp('dateTo', invalidValidatorWithParam),\n      requestBodyProp('zeroValue', zeroValueValidator, false),\n      requestBodyProp('ignoreThisToo', null, true),\n      requestBodyProp('NONEXISTENT'),\n    ];\n    const result = validateRequestBody(fakeRequestArray, reqBodyDefs);\n    expect(result.allValid).toBe(false);\n  });\n});\n"]}