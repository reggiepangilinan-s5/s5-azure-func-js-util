{"version":3,"sources":["../../src/validations/validateRequestBody/validateRequestBody.js"],"names":["require","isFunction","isNil","addReqBodyError","reqBodyErrors","prop","message","push","checkifPropExists","item","propValue","name","invokeValidators","validatorFunction","validator","validatorResult","call","validateRequestBody","req","reqbodydefs","forEach","index","body","allValid","length","errors","module","exports"],"mappings":";;;;;;;;eAA8BA,QAAQ,QAAR,C;IAAtBC,U,YAAAA,U;IAAYC,K,YAAAA,K;;AAEpB;;;;;;;;AAMA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,aAAD,EAAgBC,IAAhB,EAAsBC,OAAtB,EAAkC;AACxDF,gBAAcG,IAAd,CAAmB;AACjBF,cADiB;AAEjBC;AAFiB,GAAnB;AAID,CALD;;AAOA;;;;;AAKA,IAAME,oBAAoB,SAApBA,iBAAoB,CAACJ,aAAD,EAAgBK,IAAhB,EAAsBC,SAAtB,EAAoC;AAC5D,MAAID,QAAQP,MAAMQ,SAAN,CAAZ,EAA8B;AAC5BP,oBAAgBC,aAAhB,EAA+BK,KAAKE,IAApC,iBAAuDF,KAAKE,IAA5D;AACD;AACF,CAJD;;AAMA;;;;;;AAMA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACH,IAAD,EAAOC,SAAP,EAAkBN,aAAlB,EAAoC;AAC3D,MAAMS,oBAAoBJ,KAAKK,SAA/B;AACA,MAAID,iBAAJ,EAAuB;AACrB,QAAIZ,WAAWY,iBAAX,KAAiC,CAACX,MAAMQ,SAAN,CAAtC,EAAwD;AACtD,UAAMK,kBAAkBF,kBAAkBG,IAAlB,YAA6BN,SAA7B,CAAxB;AACA;AACA,UAAI,OAAQK,eAAR,KAA6B,SAAjC,EAA4C;AAC1CZ,wBAAgBC,aAAhB,EAA+BK,KAAKE,IAApC,iBAAuDF,KAAKE,IAA5D,qBAAgFE,kBAAkBF,IAAlG;AACA;AACD,OAHD,MAGO,IAAI,CAACI,eAAL,EAAsB;AAC3BZ,wBAAgBC,aAAhB,EAA+BK,KAAKE,IAApC,uCAA6EF,KAAKE,IAAlF,2BAA4GE,kBAAkBF,IAA9H;AACD;AACF,KATD,MASO;AACLR,sBAAgBC,aAAhB,EAA+BK,KAAKE,IAApC,iBAAuDF,KAAKE,IAA5D;AACD;AACF;AACF,CAhBD;;AAkBA;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAMM,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,WAAN,EAAsB;AAChD,MAAMf,gBAAgB,EAAtB;AACA,sBAAYe,WAAZ,EACGC,OADH,CACW,UAACC,KAAD,EAAW;AAClB,QAAMZ,OAAOU,YAAYE,KAAZ,CAAb;AACA,QAAMX,YAAYQ,IAAII,IAAJ,CAASb,KAAKE,IAAd,CAAlB;AACA;AACAH,sBAAkBJ,aAAlB,EAAiCK,IAAjC,EAAuCC,SAAvC;AACA;AACAE,qBAAiBH,IAAjB,EAAuBC,SAAvB,EAAkCN,aAAlC;AACD,GARH;AASA,SAAO;AACLmB,cAAUnB,cAAcoB,MAAd,IAAwB,CAD7B;AAELC,YAAQrB;AAFH,GAAP;AAID,CAfD;;AAiBAsB,OAAOC,OAAP,GAAiBV,mBAAjB","file":"validateRequestBody.js","sourcesContent":["const { isFunction, isNil } = require('lodash');\n\n/**\n * Add to errors list.\n * @param {any} reqBodyErrors\n * @param {any} prop\n * @param {any} message\n */\nconst addReqBodyError = (reqBodyErrors, prop, message) => {\n  reqBodyErrors.push({\n    prop,\n    message,\n  });\n};\n\n/**\n * Check if prop exists\n * @param {any} reqBodyErrors\n * @param {any} item\n */\nconst checkifPropExists = (reqBodyErrors, item, propValue) => {\n  if (item && isNil(propValue)) {\n    addReqBodyError(reqBodyErrors, item.name, `Property [${item.name}] is required.`);\n  }\n};\n\n/**\n * Invoke validators defined.\n * @param {any} item\n * @param {any} propValue\n * @param {any} reqBodyErrors\n */\nconst invokeValidators = (item, propValue, reqBodyErrors) => {\n  const validatorFunction = item.validator;\n  if (validatorFunction) {\n    if (isFunction(validatorFunction) && !isNil(propValue)) {\n      const validatorResult = validatorFunction.call(this, propValue);\n      // Validators function should always return boolean type\n      if (typeof (validatorResult) !== 'boolean') {\n        addReqBodyError(reqBodyErrors, item.name, `Property [${item.name}] validator [${validatorFunction.name}] not returning boolean.`);\n        // Validation failed\n      } else if (!validatorResult) {\n        addReqBodyError(reqBodyErrors, item.name, `Validation failed for Property [${item.name}] using validator [${validatorFunction.name}]`);\n      }\n    } else {\n      addReqBodyError(reqBodyErrors, item.name, `Property [${item.name}] validator property is not a function or there is no value to validate.`);\n    }\n  }\n};\n\n/**\n * Validate request body based on the definition\n * @param {any} req\n * @param {any} reqbodydefs\n * [\n *  {\n *      \"name\": Property Name (Case-sensitive),\n *      \"validator\": function to validate should always return bool, otherwise it will fail\n *  }\n * ]\n * @returns\n * {\n *      \"allValid\": true / false,\n *      \"errors\" : [\n *                  {\n *                      \"prop\": Property Name,\n *                      \"message\": Error Message\n *                  },\n *                  ...\n *                 ]\n * }\n */\nconst validateRequestBody = (req, reqbodydefs) => {\n  const reqBodyErrors = [];\n  Object.keys(reqbodydefs)\n    .forEach((index) => {\n      const item = reqbodydefs[index];\n      const propValue = req.body[item.name];\n      // Validate if prop has value\n      checkifPropExists(reqBodyErrors, item, propValue);\n      // Invoke validator function if there is one provided\n      invokeValidators(item, propValue, reqBodyErrors);\n    });\n  return {\n    allValid: reqBodyErrors.length <= 0,\n    errors: reqBodyErrors,\n  };\n};\n\nmodule.exports = validateRequestBody;\n\n"]}