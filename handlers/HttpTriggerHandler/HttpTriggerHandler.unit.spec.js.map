{"version":3,"sources":["../../src/handlers/HttpTriggerHandler/HttpTriggerHandler.unit.spec.js"],"names":["HttpTriggerHandler","require","httpMethods","queryParamDef","fakeContext","fakeRequest","method","GET","query","fakeRequestWithQueryParams","fakeParam","fakeQueryRequiredParamsDefs","fakeQueryParamsDefs","describe","test","mockFunction","jest","fn","mockReturnValue","handler","setHttpMethod","listen","result","actual","JSON","parse","body","expected","expect","mock","calls","length","toBe","toBeCalledWith","status","POST","setQueryParamsDefinition"],"mappings":"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","file":"HttpTriggerHandler.unit.spec.js","sourcesContent":["const HttpTriggerHandler = require('./HttpTriggerHandler');\nconst { httpMethods } = require('../../constants');\nconst { queryParamDef } = require('../../validations');\n\nconst fakeContext = {\n};\nconst fakeRequest = {\n  method: httpMethods.GET,\n  query: {},\n};\nconst fakeRequestWithQueryParams = {\n  method: httpMethods.GET,\n  query: { fakeParam: 'fakevalue' },\n};\n\nconst fakeQueryRequiredParamsDefs = [\n  queryParamDef('fakeParam', true),\n];\n\nconst fakeQueryParamsDefs = [\n  queryParamDef('fakeParam', false),\n];\n\ndescribe('utils/handlers/HttpTriggerHandler', () => {\n  test('Should execute function to be called once passing `context` and `req`', async () => {\n    const mockFunction = jest.fn();\n    mockFunction.mockReturnValue(true);\n    const handler = new HttpTriggerHandler().setHttpMethod(httpMethods.GET).listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequest);\n    const actual = JSON.parse(result.body);\n    const expected = true;\n    expect(mockFunction.mock.calls.length).toBe(1);\n    expect(mockFunction).toBeCalledWith(fakeContext, fakeRequest);\n    expect(actual).toBe(expected);\n  });\n  test('Should not execute function when httpMethod has not been set', async () => {\n    const mockFunction = jest.fn();\n    const handler = new HttpTriggerHandler().listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequest);\n    const actual = result.status;\n    const expected = 400;\n    expect(mockFunction.mock.calls.length).toBe(0);\n    expect(actual).toBe(expected);\n  });\n\n  test('Should not execute function when incorrect httpMethod has been set', async () => {\n    const mockFunction = jest.fn();\n    const handler = new HttpTriggerHandler().setHttpMethod(httpMethods.POST).listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequest);\n    const actual = result.status;\n    const expected = 400;\n    expect(mockFunction.mock.calls.length).toBe(0);\n    expect(actual).toBe(expected);\n  });\n\n  test('Should execute function to be called with query parameter definitions', async () => {\n    const mockFunction = jest.fn();\n    mockFunction.mockReturnValue(true);\n    const handler = new HttpTriggerHandler()\n      .setHttpMethod(httpMethods.GET)\n      .setQueryParamsDefinition(fakeQueryRequiredParamsDefs)\n      .listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequestWithQueryParams);\n    const actual = JSON.parse(result.body);\n    const expected = true;\n    expect(mockFunction.mock.calls.length).toBe(1);\n    expect(mockFunction).toBeCalledWith(fakeContext, fakeRequestWithQueryParams);\n    expect(actual).toBe(expected);\n  });\n\n  test('Should not execute function failing the query params definitions', async () => {\n    const mockFunction = jest.fn();\n    mockFunction.mockReturnValue(true);\n    const handler = new HttpTriggerHandler()\n      .setHttpMethod(httpMethods.GET)\n      .setQueryParamsDefinition(fakeQueryRequiredParamsDefs)\n      .listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequest);\n    const actual = result.status;\n    const expected = 400;\n    expect(mockFunction.mock.calls.length).toBe(0);\n    expect(actual).toBe(expected);\n  });\n\n  test('Should execute function query params definitions not required.', async () => {\n    const mockFunction = jest.fn();\n    mockFunction.mockReturnValue(true);\n    const handler = new HttpTriggerHandler()\n      .setHttpMethod(httpMethods.GET)\n      .setQueryParamsDefinition(fakeQueryParamsDefs)\n      .listen(mockFunction);\n    const result = await handler(fakeContext, fakeRequest);\n    const actual = JSON.parse(result.body);\n    const expected = true;\n    expect(mockFunction.mock.calls.length).toBe(1);\n    expect(mockFunction).toBeCalledWith(fakeContext, fakeRequest);\n    expect(actual).toBe(expected);\n  });\n});\n"]}