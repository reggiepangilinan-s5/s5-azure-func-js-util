{"version":3,"sources":["../../src/handlers/HttpTriggerHandler/HttpTriggerHandler.js"],"names":["errors","require","requestMethodShouldBe","specfifyHttpMethod","validateQueryParams","validateRequestBody","httpStatusCodes","toHttpResponse","HttpTriggerHandler","httpMethod","queryParamsDef","requestBodyDef","mainFunction","handler","context","req","BadRequest","method","validationResult","allValid","call","result","Ok","InternalServerError","exception","message","stack","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAASC,QAAQ,yBAAR,CAAf;;eACsDA,gC;IAA9CC,qB,YAAAA,qB;IAAuBC,kB,YAAAA,kB;;gBACCF,4B;IAAxBG,mB,aAAAA,mB;;gBACwBH,4B;IAAxBI,mB,aAAAA,mB;;gBACoBJ,0B;IAApBK,e,aAAAA,e;;AACR,IAAMC,iBAAiBN,2BAAvB;;IAEMO,kB;AACJ,gCAAc;AAAA;;AACZ,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;;;kCACaH,U,EAAY;AACxB,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;2BACMC,Y,EAAc;AAAA;;AACnB,WAAKA,YAAL,GAAoBA,YAApB;AACA,UAAMC,UAAU,IAAhB;AACA;AAAA,4FAAO,iBAAOC,OAAP,EAAgBC,GAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAEEF,QAAQJ,UAFV;AAAA;AAAA;AAAA;;AAAA,mDAGMF,eACL,IAAIP,OAAOgB,UAAX,CAAsBb,kBAAtB,CADK,EAELG,gBAAgBU,UAFX,CAHN;;AAAA;AAAA,wBAQCD,IAAIE,MAAJ,KAAeJ,QAAQJ,UARxB;AAAA;AAAA;AAAA;;AAAA,mDASMF,eACL,IAAIP,OAAOgB,UAAX,CAAsBd,wBAAwBW,QAAQJ,UAAtD,CADK,EAELH,gBAAgBU,UAFX,CATN;;AAAA;AAAA,uBAcCH,QAAQH,cAdT;AAAA;AAAA;AAAA;;AAeKQ,kCAfL,GAewBd,oBAAoBW,GAApB,EAAyBF,QAAQH,cAAjC,CAfxB;;AAAA,sBAgBIQ,iBAAiBC,QAhBrB;AAAA;AAAA;AAAA;;AAAA,mDAiBQZ,eACL,IAAIP,OAAOgB,UAAX,CAAsBE,iBAAiBlB,MAAvC,CADK,EAELM,gBAAgBU,UAFX,CAjBR;;AAAA;AAAA,uBAuBCH,QAAQF,cAvBT;AAAA;AAAA;AAAA;;AAwBKO,mCAxBL,GAwBwBb,oBAAoBU,GAApB,EAAyBF,QAAQF,cAAjC,CAxBxB;;AAAA,sBAyBIO,kBAAiBC,QAzBrB;AAAA;AAAA;AAAA;;AAAA,mDA0BQZ,eACL,IAAIP,OAAOgB,UAAX,CAAsBE,kBAAiBlB,MAAvC,CADK,EAELM,gBAAgBU,UAFX,CA1BR;;AAAA;AAAA;AAAA,yBAgCkBH,QAAQD,YAAR,CAAqBQ,IAArB,CAA0BP,QAAQD,YAAlC,EAAgDE,OAAhD,EAAyDC,GAAzD,CAhClB;;AAAA;AAgCGM,wBAhCH;AAAA,mDAiCId,eACL,yBAAec,MAAf,CADK,EAELf,gBAAgBgB,EAFX,CAjCJ;;AAAA;AAAA;AAAA;AAAA,mDAsCIf,eACL,IAAIP,OAAOuB,mBAAX,CAA+B,EAAEC,WAAW,YAAMC,OAAnB,EAA4BC,OAAO,YAAMA,KAAzC,EAA/B,CADK,EAELpB,gBAAgBiB,mBAFX,CAtCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AA4CD;;;;;AAEHI,OAAOC,OAAP,GAAiBpB,kBAAjB","file":"HttpTriggerHandler.js","sourcesContent":["const errors = require('node-http-error-objects');\nconst { requestMethodShouldBe, specfifyHttpMethod } = require('../../messages/server');\nconst { validateQueryParams } = require('../../validations');\nconst { validateRequestBody } = require('../../validations');\nconst { httpStatusCodes } = require('../../constants');\nconst toHttpResponse = require('./toHttpResponse');\n\nclass HttpTriggerHandler {\n  constructor() {\n    this.httpMethod = null;\n    this.queryParamsDef = null;\n    this.requestBodyDef = null;\n    this.mainFunction = null;\n  }\n  setHttpMethod(httpMethod) {\n    this.httpMethod = httpMethod;\n    return this;\n  }\n  setQueryParamsDefinition(queryParamsDef) {\n    this.queryParamsDef = queryParamsDef;\n    return this;\n  }\n  setRequestBodyDefinition(requestBodyDef) {\n    this.requestBodyDef = requestBodyDef;\n    return this;\n  }\n  listen(mainFunction) {\n    this.mainFunction = mainFunction;\n    const handler = this;\n    return async (context, req) => {\n      try {\n        if (!handler.httpMethod) {\n          return toHttpResponse(\n            new errors.BadRequest(specfifyHttpMethod),\n            httpStatusCodes.BadRequest,\n          );\n        }\n        if (req.method !== handler.httpMethod) {\n          return toHttpResponse(\n            new errors.BadRequest(requestMethodShouldBe + handler.httpMethod),\n            httpStatusCodes.BadRequest,\n          );\n        }\n        if (handler.queryParamsDef) {\n          const validationResult = validateQueryParams(req, handler.queryParamsDef);\n          if (!validationResult.allValid) {\n            return toHttpResponse(\n              new errors.BadRequest(validationResult.errors),\n              httpStatusCodes.BadRequest,\n            );\n          }\n        }\n        if (handler.requestBodyDef) {\n          const validationResult = validateRequestBody(req, handler.requestBodyDef);\n          if (!validationResult.allValid) {\n            return toHttpResponse(\n              new errors.BadRequest(validationResult.errors),\n              httpStatusCodes.BadRequest,\n            );\n          }\n        }\n        const result = await handler.mainFunction.call(handler.mainFunction, context, req);\n        return toHttpResponse(\n          JSON.stringify(result),\n          httpStatusCodes.Ok,\n        );\n      } catch (error) {\n        return toHttpResponse(\n          new errors.InternalServerError({ exception: error.message, stack: error.stack }),\n          httpStatusCodes.InternalServerError,\n        );\n      }\n    };\n  }\n}\nmodule.exports = HttpTriggerHandler;\n"]}