{"version":3,"sources":["../../src/handlers/HttpTriggerHandler/HttpTriggerHandler.js"],"names":["require","requestMethodShouldBe","specfifyHttpMethod","validateQueryParams","validateRequestBody","httpStatusCodes","toHttpResponse","badRequest","internalServerError","HttpTriggerHandler","httpMethod","queryParamsDef","requestBodyDef","mainFunction","handler","context","req","method","validationResult","allValid","errors","call","result","returnResponse","Ok","exception","message","stack","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;eAAsDA,gC;IAA9CC,qB,YAAAA,qB;IAAuBC,kB,YAAAA,kB;;gBACCF,4B;IAAxBG,mB,aAAAA,mB;;gBACwBH,4B;IAAxBI,mB,aAAAA,mB;;gBACoBJ,0B;IAApBK,e,aAAAA,e;;AACR,IAAMC,iBAAiBN,2BAAvB;AACA,IAAMO,aAAaP,gCAAnB;AACA,IAAMQ,sBAAsBR,yCAA5B;;IAEMS,kB;AACJ,gCAAc;AAAA;;AACZ,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;;;kCACaH,U,EAAY;AACxB,WAAKA,UAAL,GAAkBA,UAAlB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;6CACwBC,c,EAAgB;AACvC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACD;;;2BACMC,Y,EAAc;AAAA;;AACnB,WAAKA,YAAL,GAAoBA,YAApB;AACA,UAAMC,UAAU,IAAhB;AACA;AAAA,4FAAO,iBAAOC,OAAP,EAAgBC,GAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sBAEEF,QAAQJ,UAFV;AAAA;AAAA;AAAA;;AAAA,mDAGMH,WAAWL,kBAAX,CAHN;;AAAA;AAAA,wBAKCc,IAAIC,MAAJ,KAAeH,QAAQJ,UALxB;AAAA;AAAA;AAAA;;AAAA,mDAMMH,WAAWN,wBAAwBa,QAAQJ,UAA3C,CANN;;AAAA;AAAA,uBAQCI,QAAQH,cART;AAAA;AAAA;AAAA;;AASKO,kCATL,GASwBf,oBAAoBa,GAApB,EAAyBF,QAAQH,cAAjC,CATxB;;AAAA,sBAUIO,iBAAiBC,QAVrB;AAAA;AAAA;AAAA;;AAAA,mDAWQZ,WAAWW,iBAAiBE,MAA5B,CAXR;;AAAA;AAAA,uBAcCN,QAAQF,cAdT;AAAA;AAAA;AAAA;;AAeKM,mCAfL,GAewBd,oBAAoBY,GAApB,EAAyBF,QAAQF,cAAjC,CAfxB;;AAAA,sBAgBIM,kBAAiBC,QAhBrB;AAAA;AAAA;AAAA;;AAAA,mDAiBQZ,WAAWW,kBAAiBE,MAA5B,CAjBR;;AAAA;AAAA;AAAA,yBAoBkBN,QAAQD,YAAR,CAAqBQ,IAArB,CAA0BP,QAAQD,YAAlC,EAAgDE,OAAhD,EAAyDC,GAAzD,CApBlB;;AAAA;AAoBGM,wBApBH;;AAAA,uBAqBCA,OAAOC,cArBR;AAAA;AAAA;AAAA;;AAAA,mDAsBM,yBAAeD,MAAf,CAtBN;;AAAA;AAAA,mDAwBIhB,eACL,yBAAegB,MAAf,CADK,EAELjB,gBAAgBmB,EAFX,CAxBJ;;AAAA;AAAA;AAAA;AAAA,mDA6BIhB,oBAAoB,EAAEiB,WAAW,YAAMC,OAAnB,EAA4BC,OAAO,YAAMA,KAAzC,EAApB,CA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AAgCD;;;;;AAEHC,OAAOC,OAAP,GAAiBpB,kBAAjB","file":"HttpTriggerHandler.js","sourcesContent":["const { requestMethodShouldBe, specfifyHttpMethod } = require('../../messages/server');\nconst { validateQueryParams } = require('../../validations');\nconst { validateRequestBody } = require('../../validations');\nconst { httpStatusCodes } = require('../../constants');\nconst toHttpResponse = require('./toHttpResponse');\nconst badRequest = require('./response/badRequest');\nconst internalServerError = require('./response/internalServerError');\n\nclass HttpTriggerHandler {\n  constructor() {\n    this.httpMethod = null;\n    this.queryParamsDef = null;\n    this.requestBodyDef = null;\n    this.mainFunction = null;\n  }\n  setHttpMethod(httpMethod) {\n    this.httpMethod = httpMethod;\n    return this;\n  }\n  setQueryParamsDefinition(queryParamsDef) {\n    this.queryParamsDef = queryParamsDef;\n    return this;\n  }\n  setRequestBodyDefinition(requestBodyDef) {\n    this.requestBodyDef = requestBodyDef;\n    return this;\n  }\n  listen(mainFunction) {\n    this.mainFunction = mainFunction;\n    const handler = this;\n    return async (context, req) => {\n      try {\n        if (!handler.httpMethod) {\n          return badRequest(specfifyHttpMethod);\n        }\n        if (req.method !== handler.httpMethod) {\n          return badRequest(requestMethodShouldBe + handler.httpMethod);\n        }\n        if (handler.queryParamsDef) {\n          const validationResult = validateQueryParams(req, handler.queryParamsDef);\n          if (!validationResult.allValid) {\n            return badRequest(validationResult.errors);\n          }\n        }\n        if (handler.requestBodyDef) {\n          const validationResult = validateRequestBody(req, handler.requestBodyDef);\n          if (!validationResult.allValid) {\n            return badRequest(validationResult.errors);\n          }\n        }\n        const result = await handler.mainFunction.call(handler.mainFunction, context, req);\n        if (result.returnResponse) {\n          return JSON.stringify(result);\n        }\n        return toHttpResponse(\n          JSON.stringify(result),\n          httpStatusCodes.Ok,\n        );\n      } catch (error) {\n        return internalServerError({ exception: error.message, stack: error.stack });\n      }\n    };\n  }\n}\nmodule.exports = HttpTriggerHandler;\n"]}